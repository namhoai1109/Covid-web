I/ Users:

Account {
    _id: ObjectID,
    username: String //CMND,
    password: String,
    role: enum('admin', 'doctor', 'patient')
    account_status: enum('active', 'inactive')
}

Log {
    _id: ObjectID,
    time: Date,
    account_id: reference Account(_id);
}

Admin {
    _id: ObjectID,
    account_id: reference Account(_id),
    doctors: [{
        doctor_id: reference Doctor(_id)
    }],
    facilities: [{
        facility_id: reference Facility(_id)
    }]
}

Doctor {
    _id: ObjectID,
    account_id: reference Account(_id),
    patients: [{
        patient_id: reference Patient(_id)
    }],
    neccesities: [{
        neccesity_id: reference Neccesity(_id)
    }]
    history: String
}

Patient {
    _id: ObjectID,
    account_id: reference Account(_id),
    status: enum('F0', 'F1', 'F2', 'F3'),
    name: String,
    id_number: String,
    birth: String,
    address: String,
    current_facility: reference Facility(_id),
    history: [{
        date: String,
        previous: {
            status: enum('F0', 'F1', 'F2', 'F3'),
            facility: reference Facility(_id)
        },
        current: {
            status: enum('F0', 'F1', 'F2', 'F3'),
            facility: reference Facility(_id)
        }
    }],
    close_contact_list: [{
        contact_id: reference Patient(_id)
    }]
}

Facility {
    _id: ObjectID,
    name: String,
    capacity: Integer,
    current_patients_number: Integer
}

Neccesity {
    _id: ObjectID,
    name: String,
    price: Float,
    quantity_unit: enum('...'),
    image: String (image hosting url)
}

NeccesityCombo {
    _id: ObjectID,
    name: String,
    max_items: Integer,
    neccesities: [{
        neccesity_id: reference Neccesity(_id)
    }]
}



// Un-implemented
1. NeccesityCombo:
+) number_of_pack_per_person_per_time
+) time_limit


II/ Payment system:

PaymentAccount {
    _id: ObjectID,
    username: String,
    password: String,
    balance: Float
}

