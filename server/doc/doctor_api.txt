------------------------PATIENTS RELATED---------------------------
number: 1
description: Search patients
route: localhost:5000/api/doctor/patients/search
query: {
  value: String (value of field)
}
// Ex: http://localhost:5000/api/doctor/patients/search?&value=Sai%20Gon
method:GET
headers: {
  Bearer authorization: {
    type: String (JWT token)
  }
}
returns: [
  {
    _id: String,
    account: {
      _id: String,
      username: String,
      role: String,
      status: String,
    },
    id_number: String,
    name: String,
    dob: String,
    address: String,
    status: String,
    close_contact_list: []
    current_facility: String,
  }
]

number: 2
description: Filter patients
route: localhost:5000/api/doctor/patients/filter
query: {
  filter_by: String (name, id_number, dob, address, status),
  value: String/Number (value of field)
}
// Remember to encode query value. Ex: encodeURI(value): Sai Gon => Sai%20Gon
// Filtered field must be followed by a value
// Ex: http://localhost:5000/api/doctor/patients/filter?filter_by=address&value=Sai%20Gon&filter_by=status&value=f1
method: GET
headers: {
  Bearer authorization: {
    type: String (JWT token)
  }
}
returns: [
  {
    _id: String,
    account: {
      _id: String,
      username: String,
      role: String,
      status: String,
    },
    id_number: String,
    name: String,
    dob: String,
    address: String,
    status: String,
    close_contact_list: []
    current_facility: String,
  }
]

number: 3 -> Called
description: Get all patients information of a specific doctor
route: http://localhost:5000/api/doctor/patients
query (optional): {
  sort_by: String (a field of patient),
  sort_order: String (asc or desc)
}
method: GET
headers: {
  Bearer authorization: {
    type: String (JWT token)
  }
}
returns: [
  {
    _id: String,
    account: {
      _id: String,
      username: String,
      role: String,
      status: String,
    },
    id_number: String,
    name: String,
    dob: String,
    address: String,
    status: String,
    close_contact_list: []
    current_facility: String,
  }
]

number: 4 -> Called
description: Register new patient to a specific doctor
route: http://localhost:5000/api/doctor/patients
method: POST
headers: {
  Bearer authorization: {
    type: String (JWT token)
  }
}
body: {
  username: {
    type: String (number only)
    length: 9 or 11,
    required: true
  },
  password: {
    type: String
    minlength: 6,
    required: true,
  },
  name: {
    type: String,
    required: true
  },
  dob: {
    type: Date,
    required: true
  },
  address: {
    type: String,
    required: true
  },
  status: {
    type: enum('F0', 'F1', 'F2', 'F3')
    required: true
  },
  close_contact_list: [
    {
      type: String (_id)
    }
  ]
}
returns: {
  message: String
}

number: 5 -> Called
description: Update patient information of a specific doctor
route: http://localhost:5000/api/doctor/patients/id=:id
params: _id of database
method: PUT
headers: {
  Bearer authorization: {
    type: String (JWT token)
  }
}
body: {
  status: {
    type: enum('F1', 'F2', 'F3')
    required: true
  },
  current_facility: {
    type: String (ID),
    required: true
  }
  close_contact_list: [
    {
      type: String (_id)
    }
  ]
}

number: 6 -> Called
description: Delete a patient of a specific doctor
route: http://localhost:5000/api/doctor/patients/id=:id
params: _id of database
method: DELETE
headers: {
  Bearer authorization: {
    type: String (JWT token)
  }
}
returns: {
  message: String
}

---------------------------------PRODUCTS RELATED----------------------------
number: 1 -> Called
description: Get list of products
route: http://localhost:5000/api/doctor/products
query (optional): {
  sort_by: String (a field of product),
  sort_order: String (asc or desc)
}
method: GET
headers: {
  Bearer authorization: {
    type: String (JWT token)
  }
}
returns: [
  {
    _id: String,
    name: String,
    price: Number,
    quantity_unit: String,
    images: [
      String
    ]
  }
]

number: 2
description: Search products
route: localhost:5000/api/doctor/products/search
query: {
  value: String (value for searching)
}
method: GET
headers: {
  Bearer authorization: {
    type: String (JWT token)
  }
}
returns: [
  {
    _id: String,
    name: String,
    price: Number,
    quantity_unit: String,
    images: [
      String
    ]
  }
]

number: 3
description: Filter products
route: localhost:5000/api/doctor/products/filter
query: {
  filter_by: String (name, price, quantity_unit, type),
  value: String (value of field)
}
// If filter by price: value is of the following values:
- 'lt-200': price < 200000
- '200-500': price between 200000 and 500000
- '500-1000': price between 500000 and 1000000
- '1000-2000': price between 1000000 and 2000000
- '2000-5000': price between 2000000 and 5000000
- 'gt-5000': price > 5000000
method: GET
headers: {
  Bearer authorization: {
    type: String (JWT token)
  }
}
returns: [
  {
    _id: String,
    name: String,
    price: Number,
    quantity_unit: String,
    images: [
      String
    ]
  }
]

number: 4 -> Called
description: Register a new product
form: enctype="multipart/form-data"
// Create a new formData() and append data to it
// Make sure to append each file in the files array to the formData() with field name is 'images'
route: http://localhost:5000/api/doctor/products
method: POST
headers: {
  Content-Type: 'multipart/form-data',
  Bearer authorization: {
    type: String (JWT token)
  }
}
body: formData() // the formData() created above
returns: {
  message: String
}

number: 5 -> Called
description: Update a product
route: http://localhost:5000/api/doctor/products/id=:id
params: Database ID of product
// Create a formData() and append fields to it
// If delete a image, append the field 'deletions' and value is the want-to-delete image's path
// If add a image, append the field 'images' and value is the image file
// Tom gon: Muon xoa image nao, append 'deletions' va value la path cua image do
// Muon them 1 image moi nao, append 'images' va value la file image do
method: PUT
headers: {
  Bearer authorization: {
    type: String (JWT token)
  }
}
body: formData() // the formData() created above
returns: {
  message: String
}

number: 6 -> Called
description: Delete a product
route: http://localhost:5000/api/doctor/products/id=:id
form: enctype="multipart/form-data"
params: Database ID of product
method: DELETE
headers: {
  Bearer authorization: {
    type: String (JWT token)
  }
}
returns: {
  message: String
}

-----------------------------------PACKAGES RELATED--------------------------------------
number 1:
description: Get list of packages
route: http://localhost:5000/api/doctor/packages
query (optional): {
  sort_by: String (name)
  sort_order: String (asc or desc)
}
method: GET
headers: {
  Bearer authorization: {
    type: String (JWT token)
  }
}
returns: [
  {
    _id: String (Database ID),
    time_limit: {
      "value": Number,
      "unit": String ["day", "week", "month"]
    },
    limit_per_patient: Number,
    name: String,
    products: [
      {
        product: {
          _id: String (Database ID),
          name: String,
          price: Number,
          quantity_unit: String,
          images: [
            String
          ]
        },
        quantity: Number,
        _id: String (Dont know what this is :))))
      }
    ]
  }
]

number: 2
description: Search packages
route: localhost:5000/api/doctor/packages/search
query: {
  value: String (value of field or value for searching)
}
method: GET
headers: {
  Bearer authorization: {
    type: String (JWT token)
  }
}
returns: [
  {
    _id: String (Database ID),
    time_limit: {
      "value": Number,
      "unit": String ["day", "week", "month"]
    },
    limit_per_patient: Number,
    name: String,
    products: [
      {
        product: {
          _id: String (Database ID),
          name: String,
          price: Number,
          quantity_unit: String,
          images: [
            String
          ]
        },
        quantity: Number,
        _id: String (Dont know what this is :))))
      }
    ]
  }
]

number: 3
description: Filter packages
route: localhost:5000/api/doctor/packages/filter
query: {
  filter_by: String (name, time_limit, limit_per_patient),
  value: String (value of field)
}
method: GET
headers: {
  Bearer authorization: {
    type: String (JWT token)
  }
}
returns: [
  {
    _id: String (Database ID),
    time_limit: {
      "value": Number,
      "unit": String ["day", "week", "month"]
    },
    limit_per_patient: Number,
    name: String,
    products: [
      {
        product: {
          _id: String (Database ID),
          name: String,
          price: Number,
          quantity_unit: String,
          images: [
            String
          ]
        },
        quantity: Number,
        _id: String (Dont know what this is :))))
      }
    ]
  }
]

number: 4
description: Register a new package
route: http://localhost:5000/api/doctor/packages
method: POST
headers: {
  Bearer authorization: {
    type: String (JWT token)
  }
}
body: {
  name: {
    type: String,
    required: true
  },
  time_limit: {
    value: Number,
    unit: String ['day', 'week', 'month']
  },
  limit_per_patient: Number,
  products: [
    {
      product: String (Database ID of product),
      quantity: Number
    }
  ]
}
returns: {
  message: String
}

number: 5
description: Update a package
route: http://localhost:5000/api/doctor/packages/id=:id
params: Database ID of package
method: PUT
headers: {
  Bearer authorization: {
    type: String (JWT token)
  }
}
body: {
  name: {
    type: String,
    required: true
  },
  time_limit: {
    value: Number,
    unit: String ['day', 'week', 'month']
  },
  limit_per_patient: Number,
  products: [
    {
      product: String (Database ID of product),
      quantity: Number
    }
  ]
}
returns: {
  message: String
}

number: 6
description: Delete a package
route: http://localhost:5000/api/doctor/packages/id=:id
params: Database ID of package
method: DELETE
headers: {
  Bearer authorization: {
    type: String (JWT token)
  }
}
returns: {
  message: String
}