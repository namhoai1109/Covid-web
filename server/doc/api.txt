API Management List

I.Auth routes
number: 1 -> Called
description: Login
route: http://localhost:5000/api/auth/login
method: POST
body: {
  username: {
    type: String (number only)
    length: 9 or 11,
  },
  password: {
    type: String
    minlength: 6,
  }
}
returns: {
  token: String,
  username: Number (username) (cmnd or cccd),
  role: String
}

number: 2 -> Called
description: Check if has ever logged in before
route: http://localhost:5000/api/auth/check
method: POST
body: {
  username: {
    type: String (number only)
    length: 9 or 11,
  }
}
returns: {
  message: Boolean
}

number: 3 -> Called
description: Set new password for newly created account that has never logged in
route: http://localhost:5000/api/auth/update-password
method: POST
body: {
  username: {
    type: String (number only)
    length: 9 or 11,
  },
  password: {
    type: String,
    length: >= 6
  }
}
returns: {
  message: Boolean
}


II.Admin routes
number: 1 -> Called
description: Register new doctor
route: http://localhost:5000/api/admin/register
method: POST
headers: {
  Bearer authorization: {
    type: String (JWT token)
  }
}
body: {
  username: {
    type: String (number only)
    length: 9 or 11,
    required: true
  },
  password: {
    type: String
    minlength: 6,
    required: true,
  },
  name: {
    type: String,
    required: false
  }
}
returns: {
  message: String
}

number: 2 -> Called
description: Get list of doctors
route: http://localhost:5000/api/admin/doctors
method: GET
returns: [
  {
    _id: String,
    account: {
      _id: String,
      username: String,
      role: String,
      status: String,
    },
    id_number: String,
    name: String,
    patients: [
      String
    ]
  }
]

number: 3 -> Called
description: Change status of account (active/inactive)
route: localhost:5000/api/admin/doctors/id=:id/changestatus
eg: localhost:5000/api/admin/doctors/id=62d5710ffe25ed38b535bf53/changestatus
method: PUT
body:
{
  "status": "inactive" || "active"
}
return 
{
  message: String
}

number: 4 -> Called
description: Delete account
route: localhost:5000/api/admin/doctors/id=:id/delete
params: account id
eg: localhost:5000/api/admin/doctors/id=62d624944ba3d2fc45b2e894/delete
method: DELETE

return {
  message: String
}


III. Doctor routes
number: 0
description: Search/Filter patients
route: localhost:5000/api/doctor/patients/search
query: {
  filter_by: String (name, id_number, DOB, address, status),
  value: String/Number (value of field)
}
// Remember to encode query value. Ex: encodeURI(value): Sai Gon => Sai%20Gon
// Ex: http://localhost:5000/api/doctor/patients/search?filter_by=address&value=Sai%20Gon
method:GET
returns: [
  {
    _id: String,
    account: {
      _id: String,
      username: String,
      role: String,
      status: String,
    },
    id_number: String,
    name: String,
    DOB: String,
    address: String,
    status: String,
    close_contact_list: []
    current_facility: String,
  }
]

number: 1 -> Called
description: Get all patients information of a specific doctor
route: http://localhost:5000/api/doctor/patients
query (optional): {
  sort_by: String (a field of patient),
  sort_order: String (asc or desc)
}
method: GET
headers: {
  Bearer authorization: {
    type: String (JWT token)
  }
}
returns: [
  {
    _id: String,
    account: {
      _id: String,
      username: String,
      role: String,
      status: String,
    },
    id_number: String,
    name: String,
    DOB: String,
    address: String,
    status: String,
    close_contact_list: []
    current_facility: String,
  }
]

number: 2 -> Called
description: Register new patient to a specific doctor
route: http://localhost:5000/api/doctor/patients
method: POST
headers: {
  Bearer authorization: {
    type: String (JWT token)
  }
}
body: {
  username: {
    type: String (number only)
    length: 9 or 11,
    required: true
  },
  password: {
    type: String
    minlength: 6,
    required: true,
  },
  name: {
    type: String,
    required: true
  },
  DOB: {
    type: Date,
    required: true
  },
  address: {
    type: String,
    required: true
  },
  status: {
    type: enum('F0', 'F1', 'F2', 'F3')
    required: true
  },
  close_contact_list: [
    {
      type: String (_id)
    }
  ]
}
returns: {
  message: String
}

number: 3 -> Called
description: Update patient information of a specific doctor
route: http://localhost:5000/api/doctor/patients/id=:id
params: _id of database
method: PUT
headers: {
  Bearer authorization: {
    type: String (JWT token)
  }
}
body: {
  status: {
    type: enum('F1', 'F2', 'F3')
    required: true
  },
  current_facility: {
    type: String (ID),
    required: true
  }
  close_contact_list: [
    {
      type: String (_id)
    }
  ]
}

number: 4 -> Called
description: Delete a patient of a specific doctor
route: http://localhost:5000/api/doctor/patients/id=:id
params: _id of database
method: DELETE
headers: {
  Bearer authorization: {
    type: String (JWT token)
  }
}
returns: {
  message: String
}

number: 5 -> Called
description: Register a new product
form: enctype="multipart/form-data"
// Create a new formData() and append data to it
// Make sure to append each file in the files array to the formData() with field name is 'images'
route: http://localhost:5000/api/doctor/products
method: POST
headers: {
  Content-Type: 'multipart/form-data',
  Bearer authorization: {
    type: String (JWT token)
  }
}
body: formData() // the formData() created above
returns: {
  message: String
}

number: 6 -> Called
description: Get list of products
route: http://localhost:5000/api/doctor/products
query (optional): {
  sort_by: String (a field of product),
  sort_order: String (asc or desc)
}
method: GET
headers: {
  Bearer authorization: {
    type: String (JWT token)
  }
}
returns: [
  {
    _id: String,
    name: String,
    price: Number,
    quantity_unit: String,
    images: [
      String
    ]
  }
]

number: 6.5
description: Search/Filter products
route: localhost:5000/api/doctor/products/search
query: {
  filter_by: String (field of product)(optional),
  value: String/Number (value of field or value for searching)
}
// If seach, only value is required
// If filter, both value and filter_by are required
// If filter by price: value is of the following values:
- 'lt-200': price < 200000
- '200-500': price between 200000 and 500000
- '500-1000': price between 500000 and 1000000
- '1000-2000': price between 1000000 and 2000000
- '2000-5000': price between 2000000 and 5000000
- 'gt-5000': price > 5000000
method: GET
headers: {
  Bearer authorization: {
    type: String (JWT token)
  }
}
returns: [
  {
    _id: String,
    name: String,
    price: Number,
    quantity_unit: String,
    images: [
      String
    ]
  }
]

number: 7 -> Called
description: Delete a product
route: http://localhost:5000/api/doctor/products/id=:id
form: enctype="multipart/form-data"
params: Database ID of product
method: DELETE
headers: {
  Bearer authorization: {
    type: String (JWT token)
  }
}
returns: {
  message: String
}

number: 8 -> Called
description: Update a product
route: http://localhost:5000/api/doctor/products/id=:id
params: Database ID of product
// Create a formData() and append fields to it
// If delete a image, append the field 'deletions' and value is the want-to-delete image's path
// If add a image, append the field 'images' and value is the image file
// Tom gon: Muon xoa image nao, append 'deletions' va value la path cua image do
// Muon them 1 image moi nao, append 'images' va value la file image do
method: PUT
headers: {
  Bearer authorization: {
    type: String (JWT token)
  }
}
body: formData() // the formData() created above
returns: {
  message: String
}

number 9: -> Called
description: Get list of packages
route: http://localhost:5000/api/doctor/packages
query (optional): {
  sort_by: String (name)
  sort_order: String (asc or desc)
}
method: GET
headers: {
  Bearer authorization: {
    type: String (JWT token)
  }
}
returns: [
  {
    _id: String (Database ID),
    time_limit: {
      "value": Number,
      "unit": String ["day", "week", "month"]
    },
    limit_per_patient: Number,
    name: String,
    products: [
      {
        product: {
          _id: String (Database ID),
          name: String,
          price: Number,
          quantity_unit: String,
          images: [
            String
          ]
        },
        quantity: Number,
        _id: String (Dont know what this is :))))
      }
    ]
  }
]

number: 9.5
description: Search/Filter packages
route: localhost:5000/api/doctor/packages/search
query: {
  filter_by: String (name or time_limit)(optional),
  value: String/Number (value of field or value for searching)
}
// If seach, only value is required
// If filter, both value and filter_by are required
method: GET
headers: {
  Bearer authorization: {
    type: String (JWT token)
  }
}
returns: [
  {
    _id: String (Database ID),
    time_limit: {
      "value": Number,
      "unit": String ["day", "week", "month"]
    },
    limit_per_patient: Number,
    name: String,
    products: [
      {
        product: {
          _id: String (Database ID),
          name: String,
          price: Number,
          quantity_unit: String,
          images: [
            String
          ]
        },
        quantity: Number,
        _id: String (Dont know what this is :))))
      }
    ]
  }
]

number: 10 -> Called
description: Register a new package
route: http://localhost:5000/api/doctor/packages
method: POST
headers: {
  Bearer authorization: {
    type: String (JWT token)
  }
}
body: {
  name: {
    type: String,
    required: true
  },
  time_limit: {
    value: Number,
    unit: String ['day', 'week', 'month']
  },
  limit_per_patient: Number,
  products: [
    {
      product: String (Database ID of product),
      quantity: Number
    }
  ]
}
returns: {
  message: String
}

number: 11 -> Called
description: Delete a package
route: http://localhost:5000/api/doctor/packages/id=:id
params: Database ID of package
method: DELETE
headers: {
  Bearer authorization: {
    type: String (JWT token)
  }
}
returns: {
  message: String
}

number: 12 -> Called
description: Update a package
route: http://localhost:5000/api/doctor/packages/id=:id
params: Database ID of package
method: PUT
headers: {
  Bearer authorization: {
    type: String (JWT token)
  }
}
body: {
  name: {
    type: String,
    required: true
  },
  time_limit: {
    value: Number,
    unit: String ['day', 'week', 'month']
  },
  limit_per_patient: Number,
  products: [
    {
      product: String (Database ID of product),
      quantity: Number
    }
  ]
}
returns: {
  message: String
}

III. Patient
number: 1
description: Get logs
route: http://localhost:5000/api/patient/logs
method: GET
headers: {
  Bearer authorization: {
    type: String (JWT token)
  }
}
returns: [
  {
    _id: String (Database ID),
    account: String (_id of account),
    action: String,
    time: String (yyyy-mm-dd hh:mm:ss)
  }
]

number: 2
description: Get info
route: http://localhost:5000/api/patient/info
method: GET
headers: {
  Bearer authorization: {
    type: String (JWT token)
  }
}
returns: {
  _id: String (Database ID),
  id_number: String,
  name: String,
  DOB: String,
  address: String,
  status: String,
  current_facility: String,
}

number: 3
description: Change password for client
route: http://localhost:5000/api/patient/password
method: PUT
headers: {
  Bearer authorization: {
    type: String (JWT token)
  }
}
body: {
  new_password: {
    type: String
    minlength: 6,
    required: true
  }
}
returns: {
  message: String
}


number: 4
description: Buy a package
route: http://localhost:5000/api/patient/packages/id=:id
params: Database ID of package
method: POST
headers: {
  Bearer authorization: {
    type: String (JWT token)
  }
}
body: {
  products: [
    {
      id: String (Database ID of product),
      quantity: Number
    }
  ]
}
returns: {
  message: String
}


IV/ Facility Route
number: 1
description: Create Facility -> Called
route: http://localhost:5000/api/facility/create
method: POST
authorization: doctor bearer token
body:
{
    "name": "Test12",
    "capacity": 300,
    "current_count": 200,
    "province": "Hanoi",
    "district": "Cau Giay",
    "ward": "5"
}

number: 2
description: update facility
route: http://localhost:5000/api/facility/update/id=:id
method: PUT 
authorization: doctor
body:
{
  "name": "Test12",
    "capacity": 
    "current_count": 
    "province": 
    "district": 
    "ward": 
}

optional key-value pair


number: 3
description: delete facility -> Called
route: http://localhost:5000/api/facility/delete/id=:id
method: DELETE 
auth: doctor

delete one facility with ObjectID

number: 4
description: delete all facilities
route: http://localhost:5000/api/facility/delete/all
method: DELETE
auth: doctor 

number: 5
description: return one facility
route: http://localhost:5000/api/facility/get/id=:id
method: GET
auth: doctor
EX:
    {
        "location": {
            "formattedAddress": "Phuong 5, Quan Cau Giay, TP SAIGON",
            "province": "SAIGON",
            "district": "Cau Giay",
            "ward": "5"
        },
        "_id": "62e2d8c172ab805cb03a6883",
        "name": "Test123",
        "capacity": 300,
        "current_count": 200,
    }

number: 6
description: return all facilities -> Called
route: http://localhost:5000/api/facility/get/all
method: GET
auth: doctor





